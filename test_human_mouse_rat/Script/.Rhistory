i = i + 1
}
}
res = c(s.d,n.d)
return(res)
}
#Cal. the number of observed substitutions
cal_subs = function(x,y,Gj){
pos.sta = start(Gj)
pos.end = end(Gj)
y.char = str_split(y,"")[[1]] #y is the sequence containing gaps.
n.indel = s.indel = 0
if(pos.sta %% 3 == 0){#phase-2
sub = paste0(c(y.char[pos.sta-2],y.char[pos.sta-1],y.char[pos.end+1]),collapse = "")
sec = codon[[which(sapply(codon, function(X){sub %in% X}))]]
unit.1 = substr(x,pos.sta-2,pos.sta)
unit.2 = substr(x,pos.end-1,pos.end+1)
if(unit.1 %in% sec || unit.2 %in% sec){
s.indel = 1
}else{
n.indel = 1
}
}else if(pos.sta %% 3 == 1){#phase-0
s.indel = 1
}else{#phase-1
sub = paste0(c(y.char[pos.sta-1],y.char[pos.end+1],y.char[pos.end+2]),collapse = "")
sec = codon[[which(sapply(codon, function(X){sub %in% X}))]]
unit.1 = substr(x,pos.sta-1,pos.sta+1)
unit.2 = substr(x,pos.end,pos.end+2)
if(unit.1 %in% sec || unit.2 %in% sec){
s.indel = 1
}else{
n.indel = 1
}
}
res = c(s.indel,n.indel)
return(res)
}
inDir = "~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Data_6.2/Mafft_Mul/mapped_anc"
ouFile= "~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Data_6.2/zNzS.txt"
ouFile= "~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Data_6.2/zNzS_genome_sum.txt"
#Create a codon table
codon <<- list (c("TTT","TTC"),
c("TTA","TTG","CTT","CTC","CTA","CTG"),
c("ATT","ATC","ATA"),
c("ATG"),
c("GTT","GTC","GTA","GTG"),
c("TCT","TCC","TCA","TCG","AGT","AGC"),
c("CCT","CCC","CCA","CCG"),
c("ACT","ACC","ACA","ACG"),
c("GCT","GCC","GCA","GCG"),
c("TAT","TAC"),
c("CAT","CAC"),
c("CAA","CAG"),
c("AAT","AAC"),
c("AAA","AAG"),
c("GAT","GAC"),
c("GAA","GAG"),
c("TGT","TGC"),
c("TGG"),
c("CGT","CGC","CGA","CGG","AGA","AGG"),
c("GGT","GGC","GGA","GGG"),
c("TAA","TGA","TAG")
)
Files = list.files(inDir,full.names = TRUE)
DF = c()
s.ri = 0 # number of synonymous insertion sites in rat.
n.ri = 0 # number of non-synonymous insertion sites in rat.
S.ins_r = 0 #number of synonymous insertions in rat.
N.ins_r = 0 #number of non-synonymous insertions in rat.
s.md = 0 #number of synonymous deletion sites in mouse.
n.md = 0 #number of non-synonymous deletion sites in mouse.
S.del_m = 0 #number of synonymous deletions in mouse.
N.del_m = 0 #number of non-synonymous deletions in mouse.
s.mi = 0 #number of synonymous insertion sites in mouse.
n.mi = 0 #number of non-synonymous insertion sites in mouse.
S.ins_m = 0 #number of synonymous insertions in mouse.
N.ins_m = 0 #number of non-synonymous insertions in mouse.
s.rd = 0 #number of synonymous deletion sites in rat.
n.rd = 0 #number of non-synonymous deletion sites in rat.
S.del_r = 0 #number of synonymous deletions in rat.
N.del_r = 0 #number of non-synonymous deletions in rat.
for (i in 1:length(Files)) {
dna = readDNAStringSet(Files[i],format = "fasta")
len = width(dna)[1]
A = toString(dna[[1]])
M = toString(dna[[2]])
R = toString(dna[[3]])
#remove all gaps from ancestor sequence
A1 = str_remove_all(A,'-')
M1 = str_remove_all(M,'-')
R1 = str_remove_all(R,'-')
len.A1  = nchar(A1)
len.M1  = nchar(M1)
len.R1  = nchar(R1)
dna.str = str_split(as.character(dna),'')
g = lapply(dna.str, function(x){IRanges(x=='-')})
g = IRangesList(g)
a.start = start(g[[1]])
a.end   = end(g[[1]])
a.width = width(g[[1]])
m.start = start(g[[2]])
m.end   = end(g[[2]])
m.width = width(g[[2]])
r.start = start(g[[3]])
r.end   = end(g[[3]])
r.width = width(g[[3]])
#Cal. the zN/zS from mouse
if(length(g[[2]])>0){
toMatch = lapply(g, function(x){g[[2]] %in% x})
pat.1 = c(TRUE,TRUE,FALSE)
pat.2 = c(FALSE,TRUE,FALSE)
for (j in 1:length(g[[2]])) {
pat.obs = unlist(lapply(toMatch,`[[`,j), use.names = FALSE)
if(all(pat.obs==pat.1)){#insertion in rat
nSite = cal_sites(R1,m.width[j],len.R1)#m.width = a.width
s.ri  = s.ri + nSite[1]
n.ri  = n.ri + nSite[2]
Ni    = cal_subs(R,A,g[[2]][j])
S.ins_r  = S.ins_r + Ni[1]
N.ins_r  = N.ins_r + Ni[2]
}
if(all(pat.obs==pat.2)){#deletion in mouse
nSite = cal_sites(A1,m.width[j],len.A1)
s.md  = s.md + nSite[1]
n.md  = n.md + nSite[2]
Nd    = cal_subs(A,M,g[[2]][j])
S.del_m  = S.del_m + Nd[1]
N.del_m  = N.del_m + Nd[2]
}
}
}
#Cal. the dN/dS from rat
if(length(g[[3]])>0){
toMatch = lapply(g, function(x){g[[3]] %in% x})
pat.1 = c(TRUE,FALSE,TRUE)
pat.2 = c(FALSE,FALSE,TRUE)
for (j in 1:length(g[[3]])) {
pat.obs = unlist(lapply(toMatch,`[[`,j), use.names = FALSE)
if(all(pat.obs==pat.1)){#insertion in mouse
nSite = cal_sites(M1,r.width[j],len.M1)#r.width = a.width
s.mi  = s.mi + nSite[1]
n.mi  = n.mi + nSite[2]
Ni    = cal_subs(M,A,g[[3]][j])
S.ins_m  = S.ins_m + Ni[1]
N.ins_m  = N.ins_m + Ni[2]
}
if(all(pat.obs==pat.2)){#deletion in rat
nSite = cal_sites(A1,r.width[j],len.A1)
s.rd  = s.rd + nSite[1]
n.rd  = n.rd + nSite[2]
Nd    = cal_subs(A,R,g[[3]][j])
S.del_r  = S.del_r + Nd[1]
N.del_r  = N.del_r + Nd[2]
}
}
}
}
#Cal. the zNzS without any model. (to be fixed in the future)
#For any sequences without indels (NaN)
#Indel is <<1 in one sequence.
zNzS_M_ins = (N.ins_m/n.mi) / (S.ins_m/s.mi)
zNzS_M_del = (N.del_m/n.md) / (S.del_m/s.md)
zNzS_R_ins = (N.ins_r/n.ri) / (S.ins_r/s.ri)
zNzS_R_del = (N.del_r/n.rd) / (S.del_r/s.rd)
#Generate a database
df = data.frame("Mouse_zNzS_ins"=zNzS_M_ins, "Mouse_zNzS_del"=zNzS_M_del,
"Rat_dNdS_ins"=zNzS_R_ins, "Rat_zNzS_del"=zNzS_R_del)
df
a=1
f = function(i=1){return(i+a)}
f(i=2)
f(i=3)
f = function(i){return(i+a)}
f(i=2)
f(i)
i
f(i=3)
rm(list=ls())
library(Biostrings)
library(stringr)
library(seqinr)
setwd("~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Script")
a = "AATTTGATGNCTACATTGGN"
anc=a
start=13
wid=3
nchar(a)
len= 20
i = sample(len-wid+1,1,replace = TRUE)
i = sample(len-wid+1,1,replace = TRUE)
repeat{
i = sample(len-wid+1,1,replace = TRUE)
if(start %% 3 == i %% 3){
break
}
}
start=12
sample.del = function(s){
repeat{
i = sample(len-wid+1,1,replace = TRUE)
if(start %% 3 == i %% 3){
break
}
}
#i = sample(len-wid+1,1,replace = TRUE)
if(i %% 3 == 0 ){#phase-2
unit.1 = substr(anc,i-2,i)
unit.2 = substr(anc,i+wid-2,i+wid)
if(grepl('N',unit.1) || grepl('N',unit.2)){
return(sample.del(s))
}else{
sub = paste0(c(anc.c[i-2],anc.c[i-1],anc.c[i+wid]),collapse = "")
sec = codon[[which(sapply(codon, function(X){sub %in% X}))]]
if(unit.1 %in% sec || unit.2 %in% sec){
s.d = s.d + 1
}else{
n.d = n.d + 1
}
}
}else if(i %% 3 == 2 ){#phase-1
unit.1 = substr(anc,i-1,i+1)
unit.2 = substr(anc,i+wid-1,i+wid+1)
if(grepl('N',unit.1) || grepl('N',unit.2)){
return(sample.del(s))
}else{
sub = paste0(c(anc.c[i-1],anc.c[i+wid],anc.c[i+wid+1]),collapse = "")
sec = codon[[which(sapply(codon, function(X){sub %in% X}))]]
if(unit.1 %in% sec || unit.2 %in% sec){
s.d = s.d  + 1
}else{
n.d = n.d + 1
}
}
}else{#Phase-0
s.d = s.d + 1
}
res = c(s.d,n.d)
return(res)
}
repeat{
i = sample(len-wid+1,1,replace = TRUE)
if(start %% 3 == i %% 3){
break
}
}
anc.c = str_split(anc,"")[[1]]
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sampleString(s))
}
return(insert.1)
}
start
Insert = replicate(10,sample.ins(anc.c))
library(Biostrings)
library(stringr)
library(seqinr)
Insert = replicate(10,sample.ins(anc.c))
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(10,sample.ins(anc.c))
Insert
#ancestor codon
unit   = substr(anc,start,start+2)
unit.c = str_split(unit,"")[[1]]
s.i = n.i = 0
if(grepl('N',unit)){
return(c(s.i,n.i))
}else{
for (i in Insert) {
ins.c = str_split(i,"")[[1]]
if(start %% 3 == 1){#Phase-1
sec = codon[[which(sapply(codon, function(X){unit %in% X}))]]
sub.1 = paste0(c(unit.c[1],ins.c[1],ins.c[2]),collapse = "")
sub.2 = paste0(c(tail(ins.c,1),unit.c[2],unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else if(start %% 3 == 2){#phase-2
sub.1 = paste0(c(unit.c[1],unit.c[2],ins.c[1]),collapse = "")
sub.2 = paste0(c(tail(ins.c,2),unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else{#phase-0
s.i = s.i + 1
}
}
}
start=12
start=13
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(5,sample.ins(anc.c))
Insert
#ancestor codon
unit   = substr(anc,start,start+2)
unit.c = str_split(unit,"")[[1]]
s.i = n.i = 0
if(grepl('N',unit)){
return(c(s.i,n.i))
}else{
for (i in Insert) {
ins.c = str_split(i,"")[[1]]
if(start %% 3 == 1){#Phase-1
sec = codon[[which(sapply(codon, function(X){unit %in% X}))]]
sub.1 = paste0(c(unit.c[1],ins.c[1],ins.c[2]),collapse = "")
sub.2 = paste0(c(tail(ins.c,1),unit.c[2],unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else if(start %% 3 == 2){#phase-2
sub.1 = paste0(c(unit.c[1],unit.c[2],ins.c[1]),collapse = "")
sub.2 = paste0(c(tail(ins.c,2),unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else{#phase-0
s.i = s.i + 1
}
}
}
#Create a codon table
codon <<- list (c("TTT","TTC"),
c("TTA","TTG","CTT","CTC","CTA","CTG"),
c("ATT","ATC","ATA"),
c("ATG"),
c("GTT","GTC","GTA","GTG"),
c("TCT","TCC","TCA","TCG","AGT","AGC"),
c("CCT","CCC","CCA","CCG"),
c("ACT","ACC","ACA","ACG"),
c("GCT","GCC","GCA","GCG"),
c("TAT","TAC"),
c("CAT","CAC"),
c("CAA","CAG"),
c("AAT","AAC"),
c("AAA","AAG"),
c("GAT","GAC"),
c("GAA","GAG"),
c("TGT","TGC"),
c("TGG"),
c("CGT","CGC","CGA","CGG","AGA","AGG"),
c("GGT","GGC","GGA","GGG"),
c("TAA","TGA","TAG")
)
Insert
unit
s.i = n.i = 0
if(grepl('N',unit)){
return(c(s.i,n.i))
}else{
for (i in Insert) {
ins.c = str_split(i,"")[[1]]
if(start %% 3 == 1){#Phase-1
sec = codon[[which(sapply(codon, function(X){unit %in% X}))]]
sub.1 = paste0(c(unit.c[1],ins.c[1],ins.c[2]),collapse = "")
sub.2 = paste0(c(tail(ins.c,1),unit.c[2],unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else if(start %% 3 == 2){#phase-2
sub.1 = paste0(c(unit.c[1],unit.c[2],ins.c[1]),collapse = "")
sub.2 = paste0(c(tail(ins.c,2),unit.c[3]),collapse = "")
if(sub.1 %in% sec || sub.2 %in% sec){
s.i = s.i  + 1
}else{
n.i = n.i + 1
}
}else{#phase-0
s.i = s.i + 1
}
}
}
rm(list=ls())
library(Biostrings)
library(stringr)
library(seqinr)
#Create a codon table
codon <<- list (c("TTT","TTC"),
c("TTA","TTG","CTT","CTC","CTA","CTG"),
c("ATT","ATC","ATA"),
c("ATG"),
c("GTT","GTC","GTA","GTG"),
c("TCT","TCC","TCA","TCG","AGT","AGC"),
c("CCT","CCC","CCA","CCG"),
c("ACT","ACC","ACA","ACG"),
c("GCT","GCC","GCA","GCG"),
c("TAT","TAC"),
c("CAT","CAC"),
c("CAA","CAG"),
c("AAT","AAC"),
c("AAA","AAG"),
c("GAT","GAC"),
c("GAA","GAG"),
c("TGT","TGC"),
c("TGG"),
c("CGT","CGC","CGA","CGG","AGA","AGG"),
c("GGT","GGC","GGA","GGG"),
c("TAA","TGA","TAG")
)
#randomly pick the insert-sized nucleotides seperately and group them together then insert into one specific position.
a = "AATT---TGATGNCTACATTGGN"
anc.c = str_split(anc,"")[[1]]
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(100,sample.ins(anc.c))
anc=a
start=4
wid=3
anc.c = str_split(anc,"")[[1]]
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(100,sample.ins(anc.c))
Insert
str_remove_all(a,'-')
anc.r = str_remove_all(anc,'-')
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = FALSE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(100,sample.ins(anc.r))
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = TRUE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(100,sample.ins(anc.r))
Insert = replicate(10,sample.ins(anc.r))
anc.r
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = TRUE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
Insert = replicate(10,sample.ins(anc.r))
Insert
sample.ins(anc.r)
rm(list=ls())
#Obtain 100 inserts
sample.ins = function(s){
insert   = sample(s,wid,replace = TRUE)
insert.1 = paste0(insert,collapse = "")
if(grepl('N',insert.1)){
return(sample.ins(s))
}
return(insert.1)
}
sample.ins(anc.r)
#randomly pick the insert-sized nucleotides seperately and group them together then insert into one specific position.
a = "AATT---TGATGNCTACATTGGN"
anc = a
anc.r = str_remove_all(anc,'-')
Insert = replicate(10,sample.ins(anc.r))
wid=3
start=4
Insert = replicate(10,sample.ins(anc.r))
Insert = replicate(10,sample.ins(anc.r))
