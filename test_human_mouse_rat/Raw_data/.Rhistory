library(tidyverse)
.libPaths()
.libPaths(c("~/R/x86_64-pc-linux-gnu-library/4.0",.libPaths()))
q()
suppressPackageStartupMessages(library(stats))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(jsonlite))
suppressPackageStartupMessages(library(ggplot2))
readFile = function(inD, pat){
Files= list.files(inD,pattern=pat,full.names=T)
index = as.numeric(str_extract(basename(Files),'[^.]+')) #rectify the order
Files = Files[order(index)]
n    = length(Files)
res  = list(Files,n)
return(res)
}
znzs_cure
setwd("~/Dropbox (ASU)/Indel_project/Script/90")
setwd("~/Dropbox (ASU)/Indel_project/Script/90")
dir    = "../../test_90_species/Raw_data/cds"
ouD    = "../../test_90_species/Raw_data/QC/Non3/"
i=1
Dirs = list.files(dir, full.names = TRUE)
ouFile = paste0(ouD, basename(Dirs[i]), ".txt")
ouFile
Files  = list.files(Dirs[i], full.names = TRUE)
print(basename(Dirs[i]))
print(basename(Dirs[i]))
Files
ouFile
ouFile
ouFile="../../test_90_species/Raw_data/QC/ATGC013.txt"
N.list
cat("N.list",file=ouFile,sep="\n",append=T)
cat(,file="../../test_90_species/Raw_data/QC/haha.txt",sep="\n",append=T)
f
j
f=Files
i
basename(f[i])
rm(list=ls())
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(car))     #qqPlot
suppressPackageStartupMessages(library(moments)) #agostino test
setwd("~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Raw_data")
#read files
readF = function(Files){
sim      = c()
id.count = c()
id.len   = list()
for(i in 1:length(Files)){
dna   = readBStringSet(Files[i], format="fasta")
wid   = width(dna)
if(length(wid)>2){
lw  = length(wid)
dna = dna[(lw-1):lw]
}
specs       = str_split(dna,'')
sim[i]      = sim_score(specs,wid)
id.res      = indel_count(specs)
id.count[i] = id.res[[1]]
id.len[[i]] = id.res[[2]]
}
res = list(sim,id.count,id.len)
return(res)
}
#cal. similiarity
sim_score = function(specs,wid){
identical_pos = length(which(specs[[1]][specs[[1]] == specs[[2]]] != '-'))
shared_gaps   = length(which(specs[[1]][specs[[1]] == specs[[2]]] == '-'))
total_gaps    = length(which(specs[[1]] =='-')) + length(which(specs[[2]] =='-'))
sim.score     = identical_pos/(wid[1]-(total_gaps-shared_gaps))
return(sim.score)
}
#cal. indel count and indel length
indel_count = function(specs){
g  = IRangesList(lapply(specs, function(x){IRanges(x=='-')}))
ug = unlist(g)
if(length(ug)==0){
return(list(0,0))
}else{
count.g = length(ug)
len.g   = width(ug)
}
return(list(count.g,len.g))
}
#filter out using 1.5*IQR rule
iqr = function(x){
Q1   = quantile(x,0.25)
Q3   = quantile(x,0.75)
IQR  = Q3-Q1
res  = c(Q1-1.5*IQR,Q3+1.5*IQR)
return(res)
}
inD  = "mapped_cds_mafft"
getwd()
Files       = list.files(inD, full.names=TRUE)
n           = length(Files)
n    = '3'
n           = length(Files)
n           = length(Files)
data        = readF(Files)
sim.score   = data[[1]]
id.count    = data[[2]]
id.len      = data[[3]]
##sim dist
sim.logit   = logit(sim.score,percents=F,adjust=0)
sim.avg     = mean(sim.logit)
sim.sd      = sd(sim.logit)
sim.zscore  = (sim.logit-sim.avg)/sim.sd
which(sim.zscore > 3)
which(sim.zscore < -3)
iqr.sim  = iqr(sim.zscore)
bad.id1 = which(sim.zscore<iqr.sim[1])
bad.id1
iqr.sim
iqr
summary(id.count1)
id.count1
#record the low-quality files.
id.count1 = id.count[which(id.count!=0)]
id.len2   = id.len1[which(id.len1!=0)]
id.count
summary(id.count)
summary(id.length)
summary(id.len)
id.len
##length dist
id.len1 = unlist(id.len)
summary(id.len1)
par(mfrow=c(1,2))
sum(id.count)
id.count
id.count.norm = id.count/sum(id.count)
sum(id.len1)
id.len.norm   = id.len1/sum(id.len1)
id.len.norm
##count dist
hist(id.count.norm,breaks=20,prob=T,main=NULL)
lines(density(id.count.norm),lty="dotted",col="#CC6677",lwd=2)
##length dist
hist(id.len.norm,breaks=20,prob=T,main=NULL)
lines(density(id.len.norm),lty="dotted",col="#CC6677",lwd=2)
iqr.count= iqr(id.count.norm)
iqr.len  = iqr(id.len.norm)
iqr.count
iqr.len
bad.id1 = which(sim.zscore<iqr.sim[1])
bad.id1
bad.id2 = which(id.count>iqr.count[2])
bad.id2
bad.id2 = which(id.count.norm>iqr.count[2])
bad.id2
iqr.count= iqr(id.count)
bad.id2 = which(id.count>iqr.count[2])
bad.id2
iqr.len  = iqr(id.len)
iqr.len  = iqr(id.len1)
iqr.len
flag    = unlist(lapply(id.len, function(x){any(x>iqr.len[2])}))
bad.id3 = which(flag)
iqr.len  = iqr(id.len.norm)
flag    = unlist(lapply(id.len.norm, function(x){any(x>iqr.len[2])}))
bad.id3 = which(flag)
iqr.len
id.len.norm
iqr.len  = iqr(id.len1)
iqr.len
id.len1
flag    = unlist(lapply(id.len, function(x){any(x>iqr.len[2])}))
bad.id3 = which(flag)
##test normality
agostino.test(sim.zscore)
par(mfrow=c(1,2))
##similarity
hist(sim.zscore,prob=T,main=NULL)
lines(density(sim.zscore),lty="dotted",col="#CC6677",lwd=2)
qqPlot(sim.zscore,col.lines="#CC6677")
sim      = c()
id.count = c()
id.len   = list()
i
i=1
dna   = readBStringSet(Files[i], format="fasta")
wid   = width(dna)
if(length(wid)>2){
lw  = length(wid)
dna = dna[(lw-1):lw]
}
dna
specs       = str_split(dna,'')
width(dna)[1]
id.res      = indel_count(specs)
id.res
i=3
dna   = readBStringSet(Files[i], format="fasta")
wid   = width(dna)
if(length(wid)>2){
lw  = length(wid)
dna = dna[(lw-1):lw]
}
specs       = str_split(dna,'')
id.res      = indel_count(specs)
id.res
sum(id.res[[2]])
seq.len     = (width(dna)[1]-sum(id.res[[2]]))/2
seq.len
dna
seq.len     = width(dna)[1]-sum(id.res[[2]])/2
seq.len
#read files
readF = function(Files){
sim      = c()
id.count = c()
id.len   = list()
for(i in 1:length(Files)){
dna   = readBStringSet(Files[i], format="fasta")
wid   = width(dna)
if(length(wid)>2){
lw  = length(wid)
dna = dna[(lw-1):lw]
}
specs       = str_split(dna,'')
sim[i]      = sim_score(specs,wid)
id.res      = indel_count(specs)
seq.len     = width(dna)[1]-sum(id.res[[2]])/2
id.count[i] = id.res[[1]]/(seq.len)
id.len[[i]] = id.res[[2]]/(seq.len)
}
res = list(sim,id.count,id.len)
return(res)
}
#cal. similiarity
sim_score = function(specs,wid){
identical_pos = length(which(specs[[1]][specs[[1]] == specs[[2]]] != '-'))
shared_gaps   = length(which(specs[[1]][specs[[1]] == specs[[2]]] == '-'))
total_gaps    = length(which(specs[[1]] =='-')) + length(which(specs[[2]] =='-'))
sim.score     = identical_pos/(wid[1]-(total_gaps-shared_gaps))
return(sim.score)
}
#cal. indel count and indel length
indel_count = function(specs){
g  = IRangesList(lapply(specs, function(x){IRanges(x=='-')}))
ug = unlist(g)
if(length(ug)==0){
return(list(0,0))
}else{
count.g = length(ug)
len.g   = width(ug)
}
return(list(count.g,len.g))
}
#filter out using 1.5*IQR rule
iqr = function(x){
Q1   = quantile(x,0.25)
Q3   = quantile(x,0.75)
IQR  = Q3-Q1
res  = c(Q1-1.5*IQR,Q3+1.5*IQR)
return(res)
}
data        = readF(Files)
sim.score   = data[[1]]
id.count    = data[[2]]
id.len      = data[[3]]
View(id.len)
id.len1     = unlist(id.len)
id.len1
##sim dist
sim.logit   = logit(sim.score,percents=F,adjust=0)
sim.avg     = mean(sim.logit)
sim.sd      = sd(sim.logit)
sim.zscore  = (sim.logit-sim.avg)/sim.sd
par(mfrow=c(1,2))
##similarity
hist(sim.zscore,prob=T,main=NULL)
lines(density(sim.zscore),lty="dotted",col="#CC6677",lwd=2)
qqPlot(sim.zscore,col.lines="#CC6677")
agostino.test(sim.zscore) #test normality
##count dist
hist(id.count,breaks=20,prob=T,main=NULL)
lines(density(id.count.norm),lty="dotted",col="#CC6677",lwd=2)
##count dist
hist(id.count,breaks=40,prob=T,main=NULL)
lines(density(id.count.norm),lty="dotted",col="#CC6677",lwd=2)
##length dist
hist(id.len1,breaks=40,prob=T,main=NULL)
lines(density(id.len.norm),lty="dotted",col="#CC6677",lwd=2)
dev.off()
##count dist
hist(id.count,breaks=40,prob=T,main=NULL)
par(mfrow=c(1,2))
##count dist
hist(id.count,breaks=40,prob=T,main=NULL)
lines(density(id.count.norm),lty="dotted",col="#CC6677",lwd=2)
##length dist
hist(id.len1,breaks=40,prob=T,main=NULL)
lines(density(id.len.norm),lty="dotted",col="#CC6677",lwd=2)
id.len1
iqr.sim  = iqr(sim.zscore)
iqr.count= iqr(id.count)
iqr.len  = iqr(id.len1)
iqr.sim
iqr.count
iqr.len
bad.id1 = which(sim.zscore<iqr.sim[1])
bad.id2 = which(id.count>iqr.count[2])
flag    = unlist(lapply(id.len, function(x){any(x>iqr.len[2])}))
bad.id3 = which(flag)
bad.ids = unique(c(bad.id1,bad.id2,bad.id3))
summary(id.len1)
summary(id.count)
##count dist
hist(id.count,breaks=40,prob=T,main=NULL)
lines(density(id.count),lty="dotted",col="#CC6677",lwd=2)
##length dist
hist(id.len1,breaks=40,prob=T,main=NULL)
lines(density(id.len1),lty="dotted",col="#CC6677",lwd=2)
