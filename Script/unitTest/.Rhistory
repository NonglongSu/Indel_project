iter  = 0
ll.old= rep(0,K)
llv   = matrix(0,5,K)
iter=iter+1
if(iter>5) {break}
avg.gap = 1/(1-e0)
avg.gap
if(any(avg.gap<3)){
print("Average gap length less than 3!")
break
}
e3 = 1-1/(avg.gap/3)
e3
i=1
A = Alist[[i]]
#summary-stat
res1        = ziqi_prob_wz(A,g0,e3,p0,f0)
p0
f0
ziqi_prob_wz
source(paste0(sub2,"phase_indel_prob_wz.R"))
#summary-stat
res1        = ziqi_prob_wz(A,g0,e3,p0,f0)
g012= g0[1:6]
wz  = g0[7]
ei  = e3[1]
ed  = e3[2]
ei
ed
g012
co.res = codon_call(num)
codons    = co.res[[1]]
codonstrs = co.res[[2]]
syn       = co.res[[3]]
#summary the gap indicator matrix
#setup a maximum gap length of 12 for omegaz-affected indels.
sumG  = gap_sum(A,syn,12)       ##>>>>>test
sumG
N.012 = sumG[[1]]
posEdt= sumG[[2]]
lG    = sumG[[3]]
lenT  = sumG[[4]]
lG
lenT
l     = length(A)
seqc  = str_split(A,'')
g     = IRangesList(lapply(seqc, function(x){IRanges(x=='-')}))
g
Imat  = list()
phase = matrix(0,6,2)
lphase= matrix(0,3,2)              #long gap phase
posEdt= list('ins'=c(),'del'=c(),'l.ins'=c(),'l.del'=c())
#Generate the phase matrix [zn,zs,long]
#Generate a list of non-gap-site-indicator-removed positions
#Count the number of indels of {3,6,9,12}
#Sum the length of indels
gap_sum = function(A, syn, maxwid){
l     = length(A)
seqc  = str_split(A,'')
g     = IRangesList(lapply(seqc, function(x){IRanges(x=='-')}))
Imat  = list()
phase = matrix(0,6,2)
lphase= matrix(0,3,2)              #long gap phase
posEdt= list('ins'=c(),'del'=c(),'l.ins'=c(),'l.del'=c())
if(length(unlist(g)) == 0){#no gaps
return(list(phase,posEdt,lenG,0))
}else{
for (k in seq(2)) {
wid = width(g[[k]])
if(length(wid)==0){next}
if(any(wid>maxwid)){
idx = which(wid>maxwid)
pos = start(g[[k]][idx])
stp = end(g[[k]][idx])
rem = pos %% 3
lphase[1,k] = length(which(rem == 1))
lphase[2,k] = length(which(rem == 2))
lphase[3,k] = length(which(rem == 0))
posEdt[[k+2]] = stp+1
print("Warning: long gaps(>12) occured!")
}
g369 = g[[k]][which(wid<=12)]
#if(length(g369)==0){next}
Imat[[k]] = znzs_cure(seqc,g369,k,syn)
if(k==1){
k0 = k
}else{
k0 = k+2
}
phase[k0:(k0+2),] = Imat[[k]][[1]]
posEdt[[k]]       = Imat[[k]][[2]]
}
}
lG = c(length(g[[1]]),length(g[[2]]))
lT = c(sum(width(g[[1]])), sum(width(g[[2]])))/3
phase           = cbind(phase,c(lphase))
colnames(phase) = c('zn','zs','long')
rownames(phase) = c('I0','I1','I2','D0','D1','D2')
res  = list(phase,posEdt,lG,lT)
return(res)
}
Index
# Test Index func.
test_that("Test Index() ",{
expect_equal(Index(seq1),res1)
expect_equal(Index(seq2),res2)
})
file = "~/Dropbox (ASU)/Indel_project/test_human_mouse_rat/Script/sw_gap.R"
Window <<- 6
Wall   <<- 12
source(file)
file
getwd()
file = "~/Dropbox/Indel_project/test_human_mouse_rat/Script/sw_gap.R"
source(file)
file = "~/Dropbox/Indel_project/Script/sw_gap.R"
source(file)
file
file = "~/Dropbox/Indel_project/Script/sw_gap.R"
source(file)
?testthat::test_file()
file
source(file)
usethis::use_testthat()
getwd()
?source
file
source(file)
file
file = "~/Dropbox (ASU)/Indel_project/Script/sw_gap.R"
source(file)
getwd()
file = "../Script/sw_gap.R"
source(file)
file
source(paste0(sub1,"codon_call.R"))
sub1,"codon_call.R")
paste0(sub1,"codon_call.R")
source("../Script/sw_gap.R")
source("../Script/test_NNN.R")
source("../Script/sw_gap.R")
source("../Script/sw_gap.R")
file = "~/Dropbox (ASU)/Indel_project/Script/update_gap.R"
source(file)
source(file)
getwd()
source(file)
test_results = test_dir(dir, reporter = "summary")
test_results = testthat::test_dir(dir, reporter = "summary")
testthat::test_file("test_update_gap.R", reporter = "summary")
testthat::test_file("../Scrit/unitTest/test_sw_gap/test_update_gap.R", reporter = "summary")
testthat::test_file("../Script/unitTest/test_sw_gap/test_update_gap.R", reporter = "summary")
testthat::test_file("../Script/unitTest/test_update_gap/test_update_gap.R", reporter = "summary")
start_stop_test
library(testthat)
start_stop_test
file
source(file)
getwd()
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
Window <<- 6
Wall   <<- 12
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
Wall
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R")
Window <<- 6
Wall   <<- 12
source(file)
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
Index
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
Align
expect_equal(Align(wid.1, wid_ref.1), res3)
#global vars
lwall = Wall - 1
rwall = Wall + 3
##Predicted outcomes
#index
res1 = c(26, 122)
res2 = 107
#alignemnt score (Do not use circulating decimal)
res3 = 16.6666667
res4 = 41.6666667
# Test Align func.
wid.1     = substr(seq1, start =res1[1]- lwall, stop = res1[1] + rwall)
##Pseduo data
seq1 = "AAT===AAACAAAGAATGCTTACTGT---ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
seq2 = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTTG---ATCGCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
# Test Align func.
wid.1     = substr(seq1, start =res1[1]- lwall, stop = res1[1] + rwall)
wid.1
wid_ref.1 = substr(seq2, start =res1[1]- lwall, stop = res1[1] + rwall)
wid_ref.1
wid.2     = substr(seq2, start =res2[1]- lwall, stop = res2[1] + rwall)
wid_ref.2 = substr(seq1, start =res2[1]- lwall, stop = res2[1] + rwall)
wid.2
wid_ref.2
expect_equal(Align(wid.1, wid_ref.1), res3)
Align(wid.1, wid_ref.1)
res3
Align
5/24
res1
Align(wid.1, wid_ref.1),
Align(wid.1, wid_ref.1)
wid.1
wid_ref.1
diff(wid.1,wid_ref.1)
str_split(wid.1,"")[[1]]
diff(str_split(wid.1,"")[[1]], str_split(wid_ref.1,"")[[1]])
setdiff(str_split(wid.1,"")[[1]], str_split(wid_ref.1,"")[[1]])
str_split(wid_ref.1,"")[[1]])
str_split(wid_ref.1,"")[[1]]
Align
Wall
test_that("Test Align() ",{
expect_equal(Align(wid.1, wid_ref.1), res3)
expect_equal(Align(wid.2, wid_ref.2), res4)
})
Align(wid.2, wid_ref.2)
test_that("Test Align() ",{
expect_equal(Align(wid.1, wid_ref.1), res3)
expect_equal(Align(wid.2, wid_ref.2), res4)
})
# Test left_slide func.
test_that("Test left_slide() ",{
expect_equal(left_slide(seq1, str_convert(seq1), res1[1]), seq1.l)
expect_equal(left_slide(seq2, str_convert(seq2), res2[1]), seq2.l)
})
left_slide(seq1, str_convert(seq1)
left_slide(seq1, str_convert(seq1), res1[1])
left_slide
left_slide(seq1, str_convert(seq1), res1[1])
seq1
res1
left_slide
left_slide(str_convert(seq1), res1[1],3)
seq1.l
#left/right slide mode
seq1.l = "AAT===AAACAAAGAATGCTTACTG---TATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
seq1.l
left_slide
str_convert(seq1)
str_convert
left_slide
left_slide(str_convert(seq1), res1[1],3)
left_slide(str_convert(seq2), res2[1],3),
left_slide(str_convert(seq2), res2[1],6)
res2
seq2.l
seq2.l = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTT---GATCGCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
seq2.l
left_slide(str_convert(seq2), res2[1],3)
?test_that
Merge
res1
nchar("AAT===AAACAAAGAATGCTTACTGT---ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC")
Merge(res1[1], 3, seq1, seq2)
best_aligned.m
expect_equal(Merge(res1[1], 3, seq1, seq2), best_aligned.m)
#Best alignment mode
#unchanged
best_aligned.m  = "AAT===AAACAAAGAATGCTTACTGT+++ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
#changed
best_aligned.m2 = "AAT===AAACAAAGAATGCTTACTGT---ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCATAATAG---GGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
best_aligned.r  = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTTGATC---GCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
expect_equal(Merge(res1[1], 3, seq1, seq2), best_aligned.m)
res1
nchar("AAT===AAACAAAGAATGCTTACTG-")
left_slide
res1
left_slide(str_convert(seq1),res1[1],3)
index=res1[1]
wid=3
seq_v=str_convert(seq1)
swap(seq_v[index - 1], seq_v[index + wid - 1])
seq_v
seq_v=str_convert(seq1)
seq_v[index - 1]
seq_v[index + wid - 1]
seq_v
res1[[1]]
index-1
seq_v[26]
nchar("AAT===AAACAAAGAATGCTTACTGT")
nchar("AAT===AAACAAAGAATGCTTACTGT-")
nchar("AAT===AAACAAAGAATGCTTACTG-")
nchar("AAT===AAACAAAGAATGCTTACTG")
nchar("AAT===AAACAAAGAATGCTTACTGT-")
nchar("AAT===AAACAAAGAATGCTTACTGT---ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA-")
nchar("TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTTG-")
##Predicted outcomes
#index
res1 = c(27, 123)
res2 = 108
#alignemnt score (Do not use circulating decimal)
res3 = 25
res4 = 25
#left/right slide mode
seq1.l = "AAT===AAACAAAGAATGCTTACTG---TATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
seq2.l = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTT---GATCGCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
seq1.r = "AAT===AAACAAAGAATGCTTACTGTA---TAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
seq2.r = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTTGA---TCGCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
#Best alignment mode
#unchanged
best_aligned.m  = "AAT===AAACAAAGAATGCTTACTGT+++ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCA---TAATAGGGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
#changed
best_aligned.m2 = "AAT===AAACAAAGAATGCTTACTGT---ATAAGGCTTACTGTTCTAGCG===ATCACCGCG===TCATGTCTAGTTATGAACGGC------GGTTTAACATTGAATAGCAAGGCACTTCCATAATAG---GGCCGTC===GTAATTGTCTAATATAG------ATAGTA==="
best_aligned.r  = "TAA------AA===AATTTGATGCTACATTGGATGAGTCTACTTCGAGCGCGCCGCATCGATTGCAAGAGCAGTGTTGCCT===AAGAGCCGTTAGATGCGTCGTTGATC---GCGTCCGATAATTCGGGAGTTGTGC===CCCAATATTTAATATGATGA===TAGCTATAA"
# Test Align func.
wid.1     = substr(seq1, start =res1[1]- lwall, stop = res1[1] + rwall)
wid_ref.1 = substr(seq2, start =res1[1]- lwall, stop = res1[1] + rwall)
wid.2     = substr(seq2, start =res2[1]- lwall, stop = res2[1] + rwall)
wid_ref.2 = substr(seq1, start =res2[1]- lwall, stop = res2[1] + rwall)
test_that("Test Align() ",{
expect_equal(Align(wid.1, wid_ref.1), res3)
expect_equal(Align(wid.2, wid_ref.2), res4)
})
wid.1
wid_ref.1
#global vars
lwall = Wall
rwall = Wall + 2
rwall
# Test Align func.
wid.1     = substr(seq1, start =res1[1]- lwall, stop = res1[1] + rwall)
wid.1
# Test Align func.
wid.1     = substr(seq1, start =res1[1]- lwall, stop = res1[1] + rwall)
wid_ref.1 = substr(seq2, start =res1[1]- lwall, stop = res1[1] + rwall)
wid.2     = substr(seq2, start =res2[1]- lwall, stop = res2[1] + rwall)
wid_ref.2 = substr(seq1, start =res2[1]- lwall, stop = res2[1] + rwall)
test_that("Test Align() ",{
expect_equal(Align(wid.1, wid_ref.1), res3)
expect_equal(Align(wid.2, wid_ref.2), res4)
})
# Test left_slide func.
test_that("Test left_slide() ",{
expect_equal(left_slide(str_convert(seq1),res1[1],3), seq1.l)
expect_equal(left_slide(str_convert(seq2),res2[1],3), seq2.l)
})
# Test right_slide func.
test_that("Test right_slide() ",{
expect_equal(right_slide(seq1, str_convert(seq1), res1[1]), seq1.r)
expect_equal(right_slide(seq2, str_convert(seq2), res2[1]), seq2.r)
})
# Test Merge func.
test_that("Test Merge()",{
expect_equal(Merge(res1[1], 3, seq1, seq2), best_aligned.m)
expect_equal(Merge(res1[2], 3,seq1, seq2), best_aligned.m2)
expect_equal(Merge(res2[1], 3,seq2, seq1), best_aligned.r)
})
library(testthat)
source(file)
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
file
file = "../Script/sw_gap.R"
Window <<- 6
Wall   <<- 12
source(file)
source(file)
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
file
source(file)
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
#Test right_slide func.
test_that("Test right_slide() ",{
expect_equal(right_slide(seq1, str_convert(seq1), res1[1]), seq1.r)
expect_equal(right_slide(seq2, str_convert(seq2), res2[1]), seq2.r)
})
#Test right_slide func.
test_that("Test right_slide() ",{
expect_equal(right_slide(str_convert(seq1),res1[1],3), seq1.r)
expect_equal(right_slide(str_convert(seq2),res2[1],3), seq2.r)
})
source(file)
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R", reporter = "summary")
test_file("../Script/unitTest/test_sw_gap/test_sw_gap.R")
#Test right_slide func.
test_that("Test right_slide() ",{
expect_equal(right_slide(str_convert(seq1),res1[1],3), seq1.r)
expect_equal(right_slide(str_convert(seq2),res2[1],3), seq2.r)
})
codon_call.R
codon_call
#construct codons and its degeneracy
co.res    = codon_call()
#summary the gap indicator matrix
#setup a maximum gap length of 12 for omegaz-affected indels.
sumG  = gap_sum(A,syn,12)       ##>>>>>test
sumG
A
g
A[[1]]
toString(A[[1]])
#pseudo input
A1 = readBStringSet("test_gap_sum.fa")
#pseudo input
A1 = readBStringSet("sample/test_gap_sum.fa")
setwd("~/Dropbox/Indel_project/Script/unitTest")
#pseudo input
A1 = readBStringSet("sample/test_gap_sum.fa")
A1
sumG
##expected results
res1 = matrix(0,6,3)
res1[4,2:3] = c(1,1)
res1
res2 = list('ins'=c(),'del'=343,'l.ins'=c(),'l.del'=88)
res3 = list(c(0,2),c(0,11))
res2
res3
#test gap_sum function
test_that("test gap_sum()",{
expect_equal(gap_sum(A1,syn,12)[[1]], res1)
expect_equal(gap_sum(A1,syn,12)[[2]], res2)
expect_equal(gap_sum(A1,syn,12)[[3]], res3)
})
gap_sum(A1,syn,12)[[1]],
gap_sum(A1,syn,12)[[1]]
res1
##expected results
res1 = matrix(0,6,3)
res1[4,2:3] = c(1,1)
colnames(res1) = c('zn','zs','long')
rownames(res1) = c('I0','I1','I2','D0','D1','D2')
res2 = list('ins'=c(),'del'=343,'l.ins'=c(),'l.del'=88)
res3 = list(c(0,2),c(0,11))
res3
#test gap_sum function
test_that("test gap_sum()",{
expect_equal(gap_sum(A1,syn,12)[[1]], res1)
expect_equal(gap_sum(A1,syn,12)[[2]], res2)
expect_equal(gap_sum(A1,syn,12)[[3]], res3)
})
expect_equal(gap_sum(A1,syn,12)[[1]], res1)
expect_equal(gap_sum(A1,syn,12)[[2]], res2)
expect_equal(gap_sum(A1,syn,12)[[3]], res3)
gap_sum(A1,syn,12)[[3]]
gap_sum(A1,syn,12)
res3 = c(0,2)
res4 = c(0,11)
#test gap_sum function
test_that("test gap_sum()",{
expect_equal(gap_sum(A1,syn,12)[[1]], res1)
expect_equal(gap_sum(A1,syn,12)[[2]], res2)
expect_equal(gap_sum(A1,syn,12)[[3]], res3)
expect_equal(gap_sum(A1,syn,12)[[4]], res4)
})
codon_call
syncodons()
#summary the gap indicator matrix
#setup a maximum gap length of 12 for omegaz-affected indels.
sumG  = gap_sum(A,syn,12)       ##>>>>>test
N.012 = sumG[[1]]
posEdt= sumG[[2]]
lG    = sumG[[3]]
lenT  = sumG[[4]]
#average gap length
scoreE= (lenT[1]-lG[1])*log(ei)+(lG[1])*log(1-ei) + (lenT[2]-lG[2])*log(ed)+(lG[2])*log(1-ed)
avg.g = lenT/lG
avg.g
#summary the non-gap indicator matrix
rA     = rmgap1(A)
gap_sum
M.012  = nogap_sum(A, rA, syn)
M.012
M.012[80:100,,1]
M.012[80:100,,2]
M.012[60:100,,2]
M.012[50:100,,2]
M.trim = edge_trim(M.012, posEdt)           ##>>>>>test
M.trim[50:100,,2]
M.trim[50:100,,1]
M.012[50:100,,1]
edge_trim
posEddt
posEdt
M.012[50:100,,1]
M.012[1:100,,1]
M.012[1:100,,2]
edge_trim
posEdt
M.012[343,,2]
M.trim[343,,2]
edge_trim
posEdt
k=2
M.012[c(posEdt[[k]],posEdt[[k+2]]),k]
M.012[c(posEdt[[k]],posEdt[[k+2]]),,k]
c(posEdt[[k]],posEdt[[k+2]])
#Trimming the non-gap edges
edge_trim = function(M.012, posEdt){
##put the non-gap-indicator-removed-site as NA
for (k in seq(2)) {
M.012[c(posEdt[[k]],posEdt[[k+2]]),,k]=NA
}
##put the long-gap-indicator-site of the other seq as 0
M.012[posEdt[[3]],,2]=rep(0,4)
M.012[posEdt[[4]],,1]=rep(0,4)
return(M.012)
}
M.trim = edge_trim(M.012, posEdt)           ##>>>>>test
M.012[88,,2]
M.trim[88,,2]
posEdt
M.012[88,,1]
M.trim[88,,1]
M.012[343,,1]
M.012[343,,2]
M.trim[343,,2]
M.trim[343,,1]
