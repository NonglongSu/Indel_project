return(w.val)
}
#dnds
dnds_est = function(x){
Nd = sum(x$Nd)
Sd = sum(x$Sd)
N  = sum(x$N)
S  = sum(x$S)
PN = (Nd/N)
PS = (Sd/S)
#jukes cantor formula (1986)
dNdS = log(1-4*PN/3)/log(1-4*PS/3)
return(dNdS)
}
#generate dnds,ZnZs matrix
dnds_gen = function(x){
dnds = c()
for(i in 1:length(x)){
spec.sum      = read_tsv(x[i],col_names=T,show_col_types=F)
dnds[i]   = dnds_est(spec.sum)
}
dnds
}
inF  = "Results/ZnZs/coef_max.tsv"
inD  = "Results/ZD_sum"
pat   = "max"
pat   = "max"
Files = list.files(inD,full.names=T,pattern=pat)
dat   = read.table(inF,header=T,sep='\t')
namev = dat$species
n     = nrow(dat)
dnds.max = dnds_gen(Files)
#check order
dat1  = cbind(dnds.max,dat)
eudat = dat1[1:15,]
View(eudat)
order(eudat$dnds.max,decreasing=T)
order(eudat$neutral,decreasing=T)
order(eudat$GC,decreasing=T)
range(eudat$GC)
order(eudat$corr,decreasing=T)
order(eudat$yintercept,decreasing=T)
View(eudat)
?cor
getwd()
write.csv(eduat,"Results/supp4/coef_max_euk.csv")
View(dat)
dat[,2:]
dat[,2]
dat[,2:3]
dat[,2:]
#check order
dat1  = cbind(dat[,1],dnds.max,dat[,2:9])
eudat = dat1[1:15,]
?cbind
write.csv(eudat,"Results/supp4/coef_max_euk.csv",row.names=T,col.names=T)
rm(list=ls())
?outer
#Generate the rms data for 100 sample size.
suppressWarnings(library(matlib))
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(seqinr))
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(expm))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(matlib))
suppressPackageStartupMessages(library(jsonlite))
suppressPackageStartupMessages(library(SQUAREM))
setwd("~/Dropbox (ASU)/Indel_project/Script")
#4*4 GTR matrix
GTR = function(Si, pai){
r1 = matrix(0, 4, 4)
r1[lower.tri(r1)] = Si
r  = r1 + t(r1)
r  = t(r*pai)
diag(r) = -rowSums(r)
return(r)
}
#Construct a 61*61 MG94 matrix
MG94 = function(g, oga, cod){
R  = matrix(0, 61, 61)
for (i in 1:61) {
for (j in 1:61) {
if(i == j){
R[i, j] = 0
}else if(sum(cod[i, ] != cod[j, ]) > 1){#more than 1 nucleotide changes
R[i, j] = 0
}else{
if(codonstrs[j] %in% syn[[codonstrs[i]]]){#syn_subs
w = 1
}else{#nonsyn_subs
w = oga
}
pos = which(cod[i, ] != cod[j, ])
x   = which(DNA_BASES == cod[i, pos])
y   = which(DNA_BASES == cod[j, pos])
R[i, j] = w * g[x, y]
}
}
}
diag(R) = -rowSums(R)
return(R)
}
#Log-likelihood
LL = function(theta){
rmat  = GTR(theta[1:6], f0)
Rmat  = MG94(rmat, theta[7], cod)
llt = sum(log(expm(Rmat)*cf0)*dat1)
return(llt)
}
#EM
em = function(p){
s   = p[1:6]
w   = p[7]
r   = GTR(s, f0)
R   = MG94(r, w, cod)
#print(sum(R) %>% round(13))
#Simulate branch length
T1   = -sum(diag(r)*f0)
#print(T1)
##make r, R symmetric
fmat = outer(sqrt(cf0), 1/sqrt(cf0))
S    = R * fmat
##calculate eigenvectors and values.
eig = eigen(S)
D   = eig$values
V   = eig$vectors
##calculate Prob(b|a)
pab = V %*% diag(exp(D)) %*% t(V)
Pab = pab * t(fmat)
#print(rowSums(Pab))
##Log likelihood "the smaller, the better"
ll = sum(log(Pab*cf0)*dat1)
cat(sprintf("%.6f\n", ll))
##construct the Jkl matrix
J = outer(D/T1, D/T1, function(x,y) {
ifelse(x-y == 0,
T1*exp(x*T1),
exp(y*T1)*(expm1((x-y)*T1))/(x-y))
})
##calculate the expected values
# W[a,b,i,i] is the expected time spent state i on a branch going from a -> b
# U[a,b,i,j] is the expected number of events going from i -> j on a branch going from a->b
W = array(0, c(61,61,61,61))
U = array(0, c(61,61,61,61))
tm = system.time(
for(a in 1:61) {
for(b in 1:61) {
for(i in 1:61) {
for(j in 1:61) {
ff = sqrt(cf0[i]*cf0[b]/cf0[a]/cf0[j])
o  = outer(V[a,]*V[i,], V[j,]*V[b,])   ##cheat: V[i,] = t(V)[,i]
W[a,b,i,j] = ff * sum(o*J)
}
}
W[a,b,,] = W[a,b,,] / Pab[a,b]
U[a,b,,] = R * W[a,b,,]
}
}
)
##calculate expected values by summing over observations --a,b is sumable.
Wh = array(0, c(61,61))
Uh = array(0, c(61,61))
for(i in 1:61) {
for(j in 1:61) {
Wh[i,j] = sum(W[,,i,j] * dat1)
Uh[i,j] = sum(U[,,i,j] * dat1)
}
}
Wh = diag(Wh)
##M-Step maximize sigmas.
sigma.Cij = sapply(seq(6), function(x){sum(Uh[sigma.id[[x]]])})
sigma.Wij = c()
for (k in 1:6) {
ichunks   = ceiling(sigma.id[[k]]/61)
sigma.Wij = c(sigma.Wij, sum(Wh[ichunks]* t(R)[sigma.id[[k]]])/s[k])
}
s = sigma.Cij/sigma.Wij
##M-Step maximize omega
w.Cij = sum(sapply(omega.id, function(x){Uh[x[1], x[2]]}))
Rii   = c()
for (i in 1:61) {
ith.non = omega.id[which(sapply(omega.id, "[[", 1) == i)]
ith.sum = sum(sapply(ith.non, function(x){R[x[1], x[2]]})) / w
Rii     = c(Rii, ith.sum)
}
w.Wij = sum(Wh * Rii)
w     = w.Cij/w.Wij
##reconstruct gtr and mg94.
pNew = c(s,w)
#print(pNew)
return(pNew)
}
#Construct codons and its degeneracy
stp = c(49,51,57)
cod64 = cbind(rep(DNA_BASES, each = 16),
rep(DNA_BASES, times = 4, each = 4),
rep(DNA_BASES, 16))
cod        = cod64[-stp,]
codonstrs  = apply(cod, 1, stringr::str_c, collapse = "")
syn        = syncodons(codonstrs)
names(syn) = toupper(names(syn))
syn        = lapply(syn, toupper)
#setup global
cod <<- cod
codonstrs <<- codonstrs
syn <<- syn
cod
inFile = "../test_90_species/Results/truePar_100.txt"
Name   = "Results/est100/1.5e.json"
#indicators
#Name   = "Results/est100/1.5e.json"
#inFile = "../test_90_species/Results/truePar_100.txt"
n     = as.numeric(str_extract(basename(Name), "[^.]+"))
n
trueP = read.table(inFile, header=T, sep="")
tP    = unlist(trueP[n,])
pow   = as.numeric(gsub(".*[.]([^.]+)[e].*", "\\1", Name))
#True parameters, unnormalized
Pi    = tP[1:4]
Sigma = tP[5:10]
Tau   = tP[11]
omega = tP[12]
#Set up GTR matrix
gtr = GTR(Sigma, Pi)
gtr
print(-sum(diag(gtr)*Pi))
#print(-sum(diag(gtr)*Pi))
mg94 = MG94(gtr, omega, cod)
#Set up mg94 matrix and normalize it.
Pi2 = sapply(seq(61), function(x){prod(Pi[match(cod[x, ], DNA_BASES)])})
Pi2 = Pi2/sum(Pi2)
print(sum(Pi2))
#Create Symmetric matrix
o   = outer(sqrt(Pi2), 1/sqrt(Pi2))
s94 = mg94 * o
p94 = expm(s94)* t(o)
P94 = p94* Pi2
print(rowSums(p94))
library(expm)
library(stats)
library(Biostrings)
###################function setup
# Set up 4*4 GTR matrix
GTR = function(si, pai){
r1 = matrix(0, 4, 4)
r1[lower.tri(r1)] = si
r  = r1 + t(r1)
r  = t(r*pai)
diag(r) = -rowSums(r)
return(r)
}
# Construct a 64*64 MG94 matrix
MG94 = function(g, oga, cd, m){
R  = matrix(0, m, m)
for (i in 1:m) {
for (j in 1:m) {
if(i == j){
R[i, j] = 0
}else if(sum(cd[i, ] != cd[j, ]) > 1){#more than 1 nucleotide changes
R[i, j] = 0
}else{
if(codonstrs[j] %in% syn[[codonstrs[i]]]){#syn_subs
w = 1
}else{#nonsyn_subs
w = oga
}
pos = which(cd[i, ] != cd[j, ])
x   = which(DNA_BASES == cd[i, pos])
y   = which(DNA_BASES == cd[j, pos])
R[i, j] = w * g[x, y]
}
}
}
diag(R) = -rowSums(R)
return(R)
}
set.seed(8088)
#######################PART I: parameter space set up
##pi
##2(A+C)=1; highC-G or highA-T case.
nd  = 100
PiA = runif(nd,0.0,0.50)
PiT = PiA
PiC = 0.50 - PiA
PiG = PiC
Pi.all = list(PiA, PiC, PiG, PiT)
Pi.all = sapply(1:nd, function(x){sapply(Pi.all, "[[", x)})
print(dim(Pi.all))
print(colSums(Pi.all)) #1
##omega
##from paper
wv = runif(nd,0.02,0.5) #sim
##distance Tau (total mutations load--only determined by neutral gtr matrix)
##from paper
#Tau = runif(nd,0.05,5.5)  #(put 80% of the simulations in the area of saturated third-positions,seems too unreal!!)
#we setup the a*b=0.4
cv = 1
a  = 1/(cv^2)
b  = 0.4/a
Sigmas = matrix(0,6,100)
tv = c()
for (i in 1:100) {
pai = Pi.all[,i]
si  = rgamma(6, shape=a, scale=b)
gtr = GTR(si, pai)
Sigmas[,i] = si
tv[i]  = -sum(diag(gtr)*pai)
}
mean(tv)
hist(tv, prob = TRUE, xlim = c(0,2))
stv = sort(tv)
lines(stv,dgamma(stv,shape=a,scale=b),col='magenta',lwd=3)
plot(density(tv))
stv
plot(density(tv), xlab='tau',ylab='density')
?plot
plot(density(tv), xlab='tau', ylab='density')
plot(density(tv), xlab='tau', ylab='density')
GTR
GTR
library(expm)
library(purrr)
set.seed(8088)
# true parameters, unnormalized
Sigma <- 1:6
Pi <- c(0.2,0.3,0.3,0.2)
Tau <- 0.1
Sigma
# Setup matrix and normalize
rmat <- matrix(0,4,4)
rmat[lower.tri(rmat)] <- Sigma
rmat <- rmat + t(rmat)
rmat <- t(rmat * Pi)
rmat
diag(rmat) <- -rowSums(rmat)
rmat
T    <- -sum(diag(rmat)*Pi)                        ##scale it at the end.
T
rmat <- rmat/T
-sum(diag(rmat)*Pi)
pai
GTR(si, pai)
# Create Probability matrix
# pmat[i,j] is Prob(j|i) * P(i)
pmat <- expm(mat*Tau) * t(o)   ##recover to orignal Pij.
# Create Symmetric matrix
o <- outer(sqrt(Pi), 1/sqrt(Pi))                    ##outer product "magic"
mat <- rmat * o
# Create Probability matrix
# pmat[i,j] is Prob(j|i) * P(i)
pmat <- expm(mat*Tau) * t(o)   ##recover to orignal Pij.
pmat
pmat <- pmat * Pi
print(sum(pmat))
rmat
# Setup matrix and normalize
rmat <- matrix(0,4,4)
rmat[lower.tri(rmat)] <- Sigma
rmat <- rmat + t(rmat)
rmat <- t(rmat * Pi)
diag(rmat) <- -rowSums(rmat)
T    <- -sum(diag(rmat)*Pi)                        ##scale it at the end.
rmat
# Create Symmetric matrix
o <- outer(sqrt(Pi), 1/sqrt(Pi))                    ##outer product "magic"
mat <- rmat * o
# Create Probability matrix
# pmat[i,j] is Prob(j|i) * P(i)
pmat <- expm(mat*Tau) * t(o)   ##recover to orignal Pij.
pmat <- pmat * Pi
print(sum(pmat))
pmat
-sum(diag(gtr)
)
tv = c()
for (i in 1:100) {
pai = Pi.all[,i]
si  = rgamma(6, shape=a, scale=b)
gtr = GTR(si, pai)
Sigmas[,i] = si
tv[i]  = -sum(diag(gtr))
}
mean(tv)
hist(tv, prob = TRUE, xlim = c(0,2))
stv = sort(tv)
lines(stv,dgamma(stv,shape=a,scale=b),col='magenta',lwd=3)
plot(density(tv), xlab='tau', ylab='density')
tv
gtr
GTR
MG94
boot_dat
#resample the data
boot_dat = function(pmat, ssize){
dat  = sample(61*61, ssize, replace=TRUE, prob=pmat)
dat  = table(dat)
dat  = as.data.frame(dat)
id1  = as.numeric(as.vector(dat[[1]]))
id2  = as.numeric(as.vector(dat[[2]]))
Dat = matrix(0, 61, 61)
for (i in 1:length(id1)) {
Dat[id1[i]] = id2[i]
}
return(Dat)
}
boot_dat
inD    = "../../test_90_species/Raw_data/concat"
inD1   = "../../test_90_species/Results/est90"
suppressWarnings(library(matlib))
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(seqinr))
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(expm))
suppressPackageStartupMessages(library(SQUAREM))
suppressPackageStartupMessages(library(jsonlite))
suppressPackageStartupMessages(library(matlib))
setwd("~/Dropbox (ASU)/Indel_project/Script/90")
inD    = "../../test_90_species/Raw_data/concat"
inD1   = "../../test_90_species/Results/est90"
#stop codon position
stp = c(49,51,57)
#codon structure
cod64 = cbind(rep(DNA_BASES, each = 16),
rep(DNA_BASES, times = 4, each = 4),
rep(DNA_BASES, 16))
cod        = cod64[-stp,]
codonstrs  = apply(cod, 1, stringr::str_c, collapse = "")
syn        = syncodons(codonstrs)
names(syn) = toupper(names(syn))
syn        = lapply(syn, toupper)
#setup global
cod <<- cod
codonstrs <<- codonstrs
syn <<- syn
#Build omega list for M-step.
##Locating all non-syn locations in 64*64 R matrix.
omega.id = c()
for (i in 1:61) {
for (j in 1:61) {
if((i != j) &&
(sum(cod[i, ] != cod[j, ]) == 1) &&
(!(codonstrs[j] %in% syn[[codonstrs[i]]])) ){
omega.id = c(omega.id, i, j)
}
}
}
omega.id = split(omega.id, ceiling(seq_along(omega.id) / 2))
#Build sigma list for M-step
##Locating all 6-sigma locations in 64*64 R matrix.
ii = GTR(1:6, rep(1,4))
diag(ii) = 0
I = matrix(0, 61, 61)
for (i in 1:61) {
for (j in 1:61) {
if(i == j){
I[i, j] = 0
}else if(sum(cod[i, ] != cod[j, ]) > 1){
I[i, j] = 0
}else{
pos = which(cod[i, ] != cod[j, ])
x   = which(DNA_BASES == cod[i, pos])
y   = which(DNA_BASES == cod[j, pos])
I[i, j] = ii[x, y]
}
}
}
sigma.id = sapply(1:6, function(x){which(I == x)})
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>PARTII
#read files
#Name = "Results/boot90/01_FcaCaf.10.json"
name = str_extract(basename(Name), "[^.]+")
Name = "Results/boot90/01_FcaCaf.10.json"
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>PARTII
#read files
#Name = "Results/boot90/01_FcaCaf.10.json"
name = str_extract(basename(Name), "[^.]+")
file = paste0(inD,'/',name,'.clean.fasta')
#use est as p0.
file1 = paste0(inD1,'/',name,'.json')
Jtmp  = fromJSON(file1)
p0    = Jtmp$par
#determine mg94 dim
dat1 = countN(file)
countN
#######################PARTI:func setup
#create 64*64 N->N matrix
countN = function(file){
seq  = readDNAStringSet(file, format="fasta")
seqs = str_split(seq,'')
#codon trans matrix
nmat = matrix(0,61,61)
i=1
while(i<width(seq)[1]) {
c1 = paste0(seqs[[1]][i:(i+2)], collapse = '')
c2 = paste0(seqs[[2]][i:(i+2)], collapse = '')
coor1 = which(codonstrs %in% c1)
coor2 = which(codonstrs %in% c2)
nmat[coor1,coor2] = nmat[coor1,coor2] + 1
i=i+3
}
print(sum(nmat)*3)
return(nmat)
}
GTR
#determine mg94 dim
dat1 = countN(file)
